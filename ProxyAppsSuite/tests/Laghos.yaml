laghos:
    summary: Unstructured high-order finite element spatial discretization and explicit high-order time-stepping.
    variables:
           - { id: test1, problem: '0', dim_flag: "-dim", dim_val: '2', rs: '3', ok: '', ot: '', tf: '0.75', s: '', assembly: "-pa"}
           - { id: test2, problem: '0', dim_flag: "-dim", dim_val: '3', rs: '1', ok: '', ot: '', tf: '0.75', s: '', assembly: "-pa"}
           - { id: test3, problem: '1', dim_flag: "-dim", dim_val: '2', rs: '3', ok: '', ot: '', tf: '0.8', s: '', assembly: "-pa"}
           - { id: test4, problem: '1', dim_flag: "-dim", dim_val: '3', rs: '2', ok: '', ot: '', tf: '0.6', s: '', assembly: "-pa"}
           - { id: test5, problem: '2', dim_flag: "-dim", dim_val: '1', rs: '5', ok: '', ot: '', tf: '0.2', s: '', assembly: "-fa"}
           - { id: test6, problem: '3', dim_flag: "-m", dim_val: 'data/rectangle01_quad.mesh', rs: '2', ok: '', ot: '', tf: '3.0', s: '', assembly: "-pa"}
           - { id: test7, problem: '3', dim_flag: "-m", dim_val: 'data/box01_hex.mesh', rs: '1', ok: '', ot: '', tf: '3.0', s: '', assembly: "-pa"}
           - { id: test8, problem: '4', dim_flag: "-m", dim_val: "data/square_gresho.mesh", rs: '3', ok: '3', ot: '2', tf: '0.62831853', s: '7', assembly: "-pa"}
    slurm:
        num_nodes: 2
    permute_on: dim_runs
    run:
        timeout: 2000
        cmds:
            - cd Laghos
            - if [[ {{dim_runs.problem}} -eq 4 ]]; then
            -    srun -n 8 ./laghos --problem "{{dim_runs.problem}}" "{{dim_runs.dim_flag}}" "{{dim_runs.dim_val}}" -rs "{{dim_runs.rs}}" -ok "{{dim_runs.ok}}" -ot "{{dim_runs.ot}}" -tf "{{dim_runs.tf}}" -s "{{dim_runs.s}}" "{{dim_runs.assembly}}" &> {{dim_runs.id}}.out 
            - else 
            -    srun -n 8 ./laghos --problem "{{dim_runs.problem}}" "{{dim_runs.dim_flag}}" "{{dim_runs.dim_val}}" -rs "{{dim_runs.rs}}" -tf "{{dim_runs.tf}}" "{{dim_runs.assembly}}" &> {{dim_runs.id}}.out
            - fi
            - cd ..
            - mv Laghos/{{dim_runs.id}}.out {{dim_runs.id}}.out 
    build:
        modules: [gcc, openmpi/2.1.2]
        source_path: laghos
        env:
            CC: mpicc
        cmds:
            #HYPRE / METIS
            - echo "beginning hypre and metis build"
            - cd Laghos/
            - make setup
            - cd ../
            #MFEM
            - echo "beginning mfem build"
            - cd mfem
            - make parallel -j
            - cd ../
            #Laghos
            - echo "beginning laghos build"
            - cd Laghos
            - make -j
    result_parse:
        constant:
            test_id:
                const: "{{dim_runs.id}}"
        regex:
            cgH1_total_time:
                regex: 'CG \(H1\) total time: (\S+)'
                action: store
                files: '{{dim_runs.id}}.out'
            cgH1_rate:
                regex: 'CG \(H1\) rate \(megadofs x cg_iterations \/ second\): (\S+)'
                action: store
                files: '{{dim_runs.id}}.out'
            cgL2_total_time:
                regex: 'CG \(L2\) total time: (\S+)'
                action: store
                files: '{{dim_runs.id}}.out'
            cgL2_rate:
                regex: 'CG \(L2\) rate \(megadofs x cg_iterations \/ second\): (\S+)'
                action: store
                files: '{{dim_runs.id}}.out'
            forces_total_time:
                regex: 'Forces total time: (\S+)'
                action: store
                files: '{{dim_runs.id}}.out'
            forces_rate:
                regex: 'Forces rate \(megadofs x timesteps \/ second\): (\S+)'
                action: store
                files: '{{dim_runs.id}}.out'
            update_quad_data_total_time:
                regex: 'UpdateQuadData total time: (\S+)'
                action: store
                files: '{{dim_runs.id}}.out'
            update_quad_data_rate:
                regex: 'UpdateQuadData rate \(megaquads x timesteps \/ second\): (\S+)'
                action: store
                files: '{{dim_runs.id}}.out'
            major_kernels_total_time:
                regex: 'Major kernels total time \(seconds\): (\S+)'
                action: store
                files: '{{dim_runs.id}}.out'
            major_kernels_rate:
                regex: 'Major kernels total rate \(megadofs x time steps \/ second\): (\S+)'
                action: store
                files: '{{dim_runs.id}}.out'
