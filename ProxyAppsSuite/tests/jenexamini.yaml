examini:
   summary: Research vehicle for particule codes in Molecular Dynamics which allows modular independent investigation of different aspects such as force calculation, communication, neighbor list construction and binning.
   
   subtitle: "{{input.test_id}}"
   variables:
       input:
           - { test_id: "test1", file: "in.lj", comm_type: "MPI", threads: '12', devices: '2' }    

   permute_on: input
   run:
       modules: [gcc, cmake, openmpi/2.1.2]
       env:
           OMP_PLACES: 'THREADS'
           OMP_PROC_BIND: 'SPREAD'
 
       cmds:
           - set -x
           - cd ExaMiniMD/src/
           - srun ./ExaMiniMD -il ../input/{{input.file}} --comm-type "{{input.comm_type}}" --kokkos-threads={{input.threads}} --kokkos-num-devices={{input.devices}}  &> {{input.test_id}}.out 
           - cat {{input.test_id}}.out
  
   scheduler: slurm 
   slurm:
       num_nodes: 1
       tasks_per_node: 2
   
   build:
      #source_path: ExaMini
       modules: ['gcc', 'cmake', 'openmpi/2.1.2']
       env:
           http_proxy: https://proxyout.lanl.gov:8080
           https_proxy: https://proxyout.lanl.gov:8080
           CC: mpicc
       cmds:
           # Building KOKKOS
           # Assumes kokkos was cloned into a directory at the same level as ExaMiniMD
           - rm -Rf ${HOME}/kokkos
           - git clone https://github.com/kokkos/kokkos ${HOME}/kokkos
           - git checkout 2.9.00
           #- mkdir ../kokkos-build
           #- cd ../kokkos-build
           #- cmake ../kokkos/ -DCMAKE_CXX_COMPILER=g++ -DCMAKE_INSTALL_PREFIX=${KOKKOS_PREFIX} -DKokkos_ENABLE_OPENMP=ON -DKokkos_ENABLE_TESTS=ON -DKokkos_ENABLE_EXAMPLES=OFF -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_CXX_EXTENSIONS=OFF -DCMAKE_BUILD_TYPE=RELEASE
           #- make -j 
           #- make install 
           #- cd ../
           # Building ExaMiniMDi
           - git clone https://github.com/ECP-copa/ExaMiniMD
           - chmod -Rf a+wX,g+rX ExaMiniMD
           - cd ExaMiniMD/src
           - echo "beginning ExaMiniMD build"
           # Intel Sandy-Bridge CPU/ OpenMP / MPI
           - if ! make -j8 MPI=1 KOKKOS_DEVICES=OpenMP CXX=mpicxx ; then echo "BUILD FAILED!" exit -1 ; fi 

   result_parse:
       constant:
           file_name:
               const: '{{input.file}}'
           comm_type:
               const: '{{input.comm_type}}'
           threads:
               const: '{{input.threads}}'
           devices:
               const: '{{input.devices}}'
       regex:
           results:
               regex: "\#Procs\s+Particles\s+\|\s+Time\s+T_Force\s+T_Neigh\s+T_Comm\s+T_Other\s+\|\s+Steps\/s\s+Atomsteps\/s\s+Atomsteps\/\(proc\*s\)\s+"
               action: 'store_true'
               files: '{{input.test_id}}.out' 
         
           atom_1:
               regex: '\s*Atoms\:\s+(\d+)\s+\d+\s+'
               action: 'store'
               files: '{{input.test_id}}.out'
           atom_2:
               regex: '\s*Atoms\:\s+\d+\s+(\d+)\s+'
               action: 'store'
               files: '{{input.test_id}}.out'    
           proceses:
               regex: '\s*(\d)\s+\d+\s+\|\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\|\s+\S+\s+\S+\s+\S+\s+PERFORMANCE$'
               action: 'store'
               files: '{{input.test_id}}.out'
           particles:
               regex: '\s*\d\s+(\d+)\s+\|\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\|\s+\S+\s+\S+\s+\S+\s+PERFORMANCE$'
               action: 'store'
               files: '{{input.test_id}}.out'
           time_total:
               regex: '\s*\d\s+\d+\s+\|\s+(\S+)\s+\S+\s+\S+\s+\S+\s+\S+\s+\|\s+\S+\s+\S+\s+\S+\s+PERFORMANCE$'
               action: 'store'
               files: '{{input.test_id}}.out'
           time_force:
               regex: '\s*\d\s+\d+\s+\|\s+\S+\s+(\S+)\s+\S+\s+\S+\s+\S+\s+\|\s+\S+\s+\S+\s+\S+\s+PERFORMANCE$'
               action: 'store'
               files: '{{input.test_id}}.out'
           time_neighbor:
               regex: '\s*\d\s+\d+\s+\|\s+\S+\s+\S+\s+(\S+)\s+\S+\s+\S+\s+\|\s+\S+\s+\S+\s+\S+\s+PERFORMANCE$'
               action: 'store'
               files: '{{input.test_id}}.out'
           time_communication:
               regex: '\s*\d\s+\d+\s+\|\s+\S+\s+\S+\s+\S+\s+(\S+)\s+\S+\s+\|\s+\S+\s+\S+\s+\S+\s+PERFORMANCE$'
               action: 'store'
               files: '{{input.test_id}}.out'
           time_other:
               regex: '\s*\d\s+\d+\s+\|\s+\S+\s+\S+\s+\S+\s+\S+\s+(\S+)\s+\|\s+\S+\s+\S+\s+\S+\s+PERFORMANCE$'
               action: 'store'
               files: '{{input.test_id}}.out'
           steps_per_s:
               regex: '\s*\d\s+\d+\s+\|\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\|\s+(\S+)\s+\S+\s+\S+\s+PERFORMANCE$'
               action: 'store'
               files: '{{input.test_id}}.out'
           atomsteps_per_s:
               regex: '\s*\d\s+\d+\s+\|\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\|\s+\S+\s+(\S+)\s+\S+\s+PERFORMANCE$'
               action: 'store'
               files: '{{input.test_id}}.out'
           atomsteps_per_procs:
               regex: '\s*\d\s+\d+\s+\|\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\|\s+\S+\s+\S+\s+(\S+)\s+PERFORMANCE$'
               action: 'store'
               files: '{{input.test_id}}.out'
