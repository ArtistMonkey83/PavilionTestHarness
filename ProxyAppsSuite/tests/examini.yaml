
examini:
   summary: Research vehicle for particule codes in Molecular Dynamics which allows modular independent investigation of different aspects such as force calculation, communication, neighbor list construction and binning.
  

   build:
       modules: [ gcc, cmake, openmpi/2.1.2 ]
       source_path: ExaMini
       env:
          CC: mpicc
       cmds:
           # Building KOKKOS
           - git clone https://github.com/kokkos/kokkos
           - echo "beginning kokkos build"
           - cd kokkos
           - git checkout 3.0.00
           - mkdir ../kokkos-build
           - cd ../kokkos-build
           - cmake ../kokkos/ -DCMAKE_CXX_COMPILER=g++ -DCMAKE_INSTALL_PREFIX=${PWD}/../kokkos-3.0.00 -DKokkos_ENABLE_OPENMP=ON -DKokkos_ENABLE_TESTS=ON -DKokkos_ENABLE_EXAMPLES=OFF -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_CXX_EXTENSIONS=OFF -DCMAKE_BUILD_TYPE=RELEASE
           - make -j 
           - make install 
           - cd ../
           # Building ExaMiniMDi
           -  git clone https://github.com/ECP-copa/ExaMiniMD
           - cd ExaMiniMD/src
           - echo "beginning ExaMiniMD build"
           - make -j KOKKOS_PATH=../../kokkos 

   scheduler: slurm
   slurm:
      num_nodes: 1
      tasks_per_node: 2
 
   subtitle: "{{input.test_id}}"
   variables:
     input:
        - { test_id: "test1", file: "in.lj", comm_type: "MPI", threads: '12', devices: '2' }    
   run:
     modules: [ gcc, cmake, openmpi/2.1.2 ]
     env:
        OMP_PLACES: 'THREADS'
        OMP_PROC_BIND: 'SPREAD'
 
     cmds:
         - cd ExaMiniMD/src
         - srun ./ExaMiniMD  -il ../input/{{input.file}} --comm-type "{{input.comm_type}}" --kokkos-threads={{input.threads}} --kokkos-num-devices={{input.devices}}  &> {{input.test_id}}.out 
         - cd ../../
         - mv ExaMiniMD/src/{{input.test_id}}.out {{input.test_id}}.out
         - cat {{input.test_id}}.out
  
   result_parse:
      constant:
         file_name:
            const: '{{input.file}}'
         comm_type:
            const: '{{input.comm_type}}'
         threads:
            const: '{{input.threads}}'
         devices:
            const: '{{input.devices}}'
      regex:
         results:
            regex: "\#Procs\s+Particles\s+\|\s+Time\s+T_Force\s+T_Neigh\s+T_Comm\s+T_Other\s+\|\s+Steps\/s\s+Atomsteps\/s\s+Atomsteps\/\(proc\*s\)\s+"
            action: 'store_true'
            files: '{{input.test_id}}.out' 
         
         atom_1:
            regex: '\s*Atoms\:\s+(\d+)\s+\d+\s+'
            files: '{{input.test_id}}.out'
         atom_2:
            regex: '\s*Atoms\:\s+\d+\s+(\d+)\s+'
            files: '{{input.test_id}}.out'    
         proceses:
            regex: '\s*(\d)\s+\d+\s+\|\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\|\s+\S+\s+\S+\s+\S+\s+PERFORMANCE$'
            files: '{{input.test_id}}.out'
         particles:
            regex: '\s*\d\s+(\d+)\s+\|\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\|\s+\S+\s+\S+\s+\S+\s+PERFORMANCE$'
            files: '{{input.test_id}}.out'
         time_total:
            regex: '\s*\d\s+\d+\s+\|\s+(\S+)\s+\S+\s+\S+\s+\S+\s+\S+\s+\|\s+\S+\s+\S+\s+\S+\s+PERFORMANCE$'
            files: '{{input.test_id}}.out'
         time_force:
            regex: '\s*\d\s+\d+\s+\|\s+\S+\s+(\S+)\s+\S+\s+\S+\s+\S+\s+\|\s+\S+\s+\S+\s+\S+\s+PERFORMANCE$'
            files: '{{input.test_id}}.out'
         time_neighbor:
            regex: '\s*\d\s+\d+\s+\|\s+\S+\s+\S+\s+(\S+)\s+\S+\s+\S+\s+\|\s+\S+\s+\S+\s+\S+\s+PERFORMANCE$'
            files: '{{input.test_id}}.out'
         time_communication:
            regex: '\s*\d\s+\d+\s+\|\s+\S+\s+\S+\s+\S+\s+(\S+)\s+\S+\s+\|\s+\S+\s+\S+\s+\S+\s+PERFORMANCE$'
            files: '{{input.test_id}}.out'
         time_other:
            regex: '\s*\d\s+\d+\s+\|\s+\S+\s+\S+\s+\S+\s+\S+\s+(\S+)\s+\|\s+\S+\s+\S+\s+\S+\s+PERFORMANCE$'
            files: '{{input.test_id}}.out'
         steps_per_s:
            regex: '\s*\d\s+\d+\s+\|\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\|\s+(\S+)\s+\S+\s+\S+\s+PERFORMANCE$'
            files: '{{input.test_id}}.out'
         atomsteps_per_s:
            regex: '\s*\d\s+\d+\s+\|\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\|\s+\S+\s+(\S+)\s+\S+\s+PERFORMANCE$'
            files: '{{input.test_id}}.out'
         atomsteps_per_procs:
            regex: '\s*\d\s+\d+\s+\|\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\|\s+\S+\s+\S+\s+(\S+)\s+PERFORMANCE$'
            files: '{{input.test_id}}.out'
