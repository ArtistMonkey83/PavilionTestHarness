amg:
    summary: P1. Laplace problem on 3D cube with 27 point stencil. P2. Non-linear time-dependent problem.
    variables:
        problem: 
            - { name: "problem1", nxval: '100', nyval: '100', nzval: '100', pxval: '2', pyval: '2', pzval: '1', flags: '-problem 1' }
            - { name: "problem2", nxval: '20', nyval: '20', nzval: '20', pxval: '2', pyval: '2', pzval: '1', flags: '-problem 2' }
    slurm:
        num_nodes: 4
    permute_on: problem
    subtitle: '{{problem.name}}'
    run:
        env:
            OMP_NUM_THREADS: '2'
            OMP_DISPLAY_ENV: 'VERBOSE'
        timeout: 1000
        cmds:
            - cd test
            - echo "running {{problem.name}}"
            - tasks_per_node={{problem.pxval*problem.pyval*problem.pzval}}
            - srun -n $tasks_per_node ./amg {{problem.flags}} -P "{{problem.pxval}}" "{{problem.pyval}}" "{{problem.pzval}}" -n "{{problem.nxval}}" "{{problem.nyval}}" "{{problem.nzval}}" &> {{problem.name}}.out
            - cd ..
            - mv test/{{problem.name}}.out {{problem.name}}.out
    build:
        modules: [gcc, openmpi/2.1.2]
        source_path: amg.tar.gz
        env:
            CC: mpicc
        cmds:
            - make all
    result_parse:
        constant:
            problem:
                const: "{{problem.name}}" 
            nx:
                const: "{{problem.nxval}}"
            ny:
                const: "{{problem.nyval}}"
            nz:
                const: "{{problem.nzval}}"
            px:
                const: "{{problem.pxval}}"
            py:
                const: "{{problem.pyval}}"
            pz:
                const: "{{problem.pzval}}"
        regex:
            numthreads:
                regex: "OMP_NUM_THREADS = \'(\d+)\'"
                action: store
                files: '{{problem.name}}.out'
            iterations:
                regex: 'Iterations = (\d+)'
                action: store
                files: '{{problem.name}}.out' 
            fom:
                regex: 'Figure\s+of\s+Merit\s+\(FOM_\d\):\s+([\S]+)'
                action: store
                files: '{{problem.name}}.out'
