_base:

    summary: A test of amg

    build:
        modules: [gcc, openmpi/2.1.2]
        source_path: amg.tar.gz
        env:
            CC: mpicc
        cmds:
            - make all

    scheduler: slurm
    slurm:
        num_nodes: 1
        tasks_per_node: 4

problem1:
    inherits_from: _base
    summary: running AMG's built in problem1
    variables:
        nvals: { nxval: '100', nyval: '100', nzval: '100' }
        pvals: { pxval: '2', pyval: '2', pzval: '1' }
    run:
        cmds:
            - cd test
            - echo "running problem one"
            - srun -n 4 amg -P "{{pvals.pxval}}" "{{pvals.pyval}}" "{{pvals.pzval}}" -n "{{nvals.nxval}}" "{{nvals.nyval}}" "{{nvals.nzval}}" &> problem1.out
            - cd ..
            - mv test/problem1.out problem1.out
    result_parse:
        constant:
            nx:
                const: "{{nvals.nxval}}"
            ny:
                const: "{{nvals.nyval}}"
            nz:
                const: "{{nvals.nzval}}"
            px:
                const: "{{pvals.pxval}}"
            py:
                const: "{{pvals.pyval}}"
            pz:
                const: "{{pvals.pzval}}"
        regex:
            iterations:
                regex: 'Iterations = (\d+)'
                action: store
                files: 'problem1.out'
            fom_1:
                regex: 'Figure\s+of\s+Merit\s+\(FOM_1\):\s+([\S]+)'
                action: store
                files: 'problem1.out'


problem2:
    inherits_from: _base
    summary: running AMG's built in problem2
    variables:
        nvals: { nxval: '20', nyval: '20', nzval: '20' }
        pvals: { pxval: '2', pyval: '2', pzval: '1' }
    run:
        timeout: 1000
        cmds:
            - cd test
            - echo "running problem two"
            - srun -n 4 amg -problem 2 -P "{{pvals.pxval}}" "{{pvals.pyval}}" "{{pvals.pzval}}" -n "{{nvals.nxval}}" "{{nvals.nyval}}" "{{nvals.nzval}}" &> problem2.out
            - cd ..
            - mv test/problem2.out problem2.out
    result_parse:
        constant:
            nx:
                const: "{{nvals.nxval}}"
            ny:
                const: "{{nvals.nyval}}"
            nz:
                const: "{{nvals.nzval}}"
            px:
                const: "{{pvals.pxval}}"
            py:
                const: "{{pvals.pyval}}"
            pz:
                const: "{{pvals.pzval}}"
        regex:
            iterations:
                regex: 'Cum. No. of Iterations = (\d+)'
                action: store
            fom_2:
                files: 'problem2.out'
                regex: 'Figure\s+of\s+Merit\s+\(FOM_2\):\s+([\S]+)'
                action: store

