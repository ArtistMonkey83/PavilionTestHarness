_base:
    summary: A benchmarking tool designed to maintain constant per-task I/o workload as task count is varied.
    variables:
          interface: [ hdf5, silo, miftmpl ] 
    slurm:
          num_nodes: 2
   
_build:
    #not used in the build but run section inherits_from: _base
    inherits_from: _base
    build:
        modules: [cmake, gcc, openmpi/2.1.2, hdf5-parallel]
        source_path: macsio
        env:
            CC: mpicc
            JSONCWX_PREFIX: $PWD/JSONCWX
            SILO_PREFIX: $PWD/SILO
            MACSIO_PREFIX: $PWD/MACSIO
        cmds:
            #Getting the files for json-cwx,hdf5 and silo
            #- git clone https://github.com/LLNL/json-cwx.git
            #SILO requires a patch to work properly
            #- wget https://wci.llnl.gov/content/assets/docs/simulation/computer-codes/silo/silo-4.10.2/silo-4.10.2.tar.gz

            #Getting MACSio-1.1
            #- wget https://github.com/LLNL/MACSio/archive/v1.1.tar.gz
            
            #Extracting files
            - tar xfz ./json-cwx.tgz

            #Make Json-cwx
            - cd ./json-cwx/json-cwx
            - sh autogen.sh
            - ./configure --prefix=$JSONCWX_PREFIX
            - make -j
            - make install
            - cd ../..

            #Make silo
            - tar xfz silo-4.10.2.tar.gz
            - cd silo-4.10.2
            - ./configure CFLAGS="-I$HDF5_ROOT/include $CFLAGS" LDFLAGS="-L$HDF5_ROOT/lib $LDFLAGS" CXX=mpicxx CC=mpicc FC=mpif90
              --prefix=$SILO_PREFIX --with-hdf5=${HDF5_ROOT} --enable-shared --enable-install-lite-headers --enable-fortran
            - make -j
            - make install
            - cd ../
            
            
            #Build MACSio with Silo and HDF5 plugins
            - tar xfz MACSio.tgz
            - cd MACSio
            - git checkout v1.1
            - cmake -DCMAKE_INSTALL_PREFIX=$MACSIO_PREFIX -DWITH_JSON-CWX_PREFIX=$JSONCWX_PREFIX -DWITH_SILO_PREFIX=$SILO_PREFIX -DENABLE_HDF5_PLUGIN=ON -DWITH_HDF5_PREFIX=$HDF5_ROOT .
            - make -j
            - make install

#Test for running MACSio with out plugins
macsio:
    inherits_from: _build
    permute_on: interface
    summary: MACSio test with out plug-ins
    run:
        modules: [cmake, gcc, openmpi/2.1.2, hdf5-parallel]
        cmds:
            - export LD_LIBRARY_PATH=${PWD}/SILO/lib:${LD_LIBRARY_PATH}
            - export LD_LIBRARY_PATH=${PWD}/JSONCWX/lib:${LD_LIBRARY_PATH}
            - if srun -N2 -n64 $PWD/MACSIO/macsio --interface {{interface}} --avg_num_parts 8 --part_size 100K --parallel_file_mode MIF 32 ; then
            -    if [[ -f macsio-timings.log ]] ; then 
            -       while read line ; do 
            -          if [[ $line =\~ Processor ]] ; then
            -             printf "%s " $(echo $line|sed 's/-//g'|sed 's/Processor /Processor=/g')
            -          else
            -             echo $line
            -          fi
            -       done < macsio-timings.log &> {{interface}}-timings-parsed.log
            -       mv macsio-timings.log {{interface}}-timings.log 
            -       awk -F',' '$1 \~ /Processor/ {print $3}'  {{interface}}-timings-parsed.log |awk -F'=' '{print $2}' |sed 's/(.*//g' |awk '{sum += $1 } END {print "MIN="sum/NR}' > {{interface}}-results.out
            -       awk -F',' '$1 \~ /Processor/ {print $4}'  {{interface}}-timings-parsed.log |awk -F'=' '{print $2}' |sed 's/(.*//g' |awk '{sum += $1 } END {print "AVG="sum/NR}' >> {{interface}}-results.out
            -       awk -F',' '$1 \~ /Processor/ {print $5}'  {{interface}}-timings-parsed.log |awk -F'=' '{print $2}' |sed 's/(.*//g' |awk '{sum += $1 } END {print "MAX="sum/NR}' >> {{interface}}-results.out
            -       echo "PASS"  >> {{interface}}-results.out
            -    fi 
            -    if [[ -f macsio-log.log ]] ; then 
            -       mv macsio-log.log {{interface}}-log.log
            -    fi 
            - else
            -    echo "FAIL"
            -    rm macsio-timings.log macsio-log.log
            - fi 

    result_parse:
        constant:
            interface:
                const: '{{interface}}' 
        regex:
            result:
                regex: 'PASS'
                action: store_true
                files: '{{interface}}-results.out'
            min:
                regex: 'MIN=(.*)'
                action: store
                files: '{{interface}}-results.out'
            avg:
                regex: 'AVG=(.*)'
                action: store
                files: '{{interface}}-results.out'
            max:
                regex: 'MAX=(.*)'
                action: store
                files: '{{interface}}-results.out'
          
