_base::
    summary: A benchmarking tool designed to maintain constant per-task I/o workload as task count is varied.
    variables:
        #problem: 
         #   - { name: "macsio", np: '{{$n}}', interface: '{{$i}}', parallelFmode: '{{$m}}', partType: '{{$pt}}', partDim: '{{$pd}}', partSize: '{{$ps}}',  flags: '-macsio' }
          #  - { name: "macsioWsilo", np: '$n', interface: '$i', parallelFmode: '$m', pxval: '4', pyval: '3', flags: '-macsioWsilo' }
           # - { name: "macsioWsiloWhdf5", np: '$n', interface: '$i', parallelFmode: '$m', flags: '-macsioWsiloWhdf5'  }
          numOfTasks: 93
          numOfHDF5: 8
          mode: MIF
          partDim: 2
          partType: rectilinear
          ppTask: 3
          ppSize: 40000


    slurm:
        #can run on multiple nodes
          num_nodes: 3
   
_build:
    inherits_from: _base
    build:
        modules: [cmake, gcc, openmpi/2.1.2]
        source_path: json-cwx
        env:
            CC: mpicc
        cmds:
            #Getting the files for json-cwx,hdf5 and silo
            - wget https://github.com/json-c/json-c/archive/json-c-0.12-20140410.tar.gz
            - wget https://www.hdfgroup.org/package/CMake-hdf5-1.12.0.tar.gz
            - wget https://wci.llnl.gov/content/assets/docs/simulation/computer-codes/silo/silo-4.10.2/silo-4.10.2.tar.gz

            #Getting Patched MACSio-1.1
            - wget https://github.com/LLNL/MACSio/archive/v1.1.tar.gz
            
            #Extracting files
            - tar xvf ./json-c-0.12-20140json-c-0.12-20140410.tar.gz
            - tar xvf ./CMake-hdf5-1.12.0.tar.gz
            - tar xvf ./silo-4.10.2.tar.gz
            - tar xvf ./v1.1.tar.gz

            #Make Json-cwx
            - cd ./json-c-json-c-0.12-20140410
            - sh autogen.sh
            - ./configure
            - make

            #Make hdf5
            - cd ./hdf5-1.12.0
            - sh autogen.sh
            - ./configure
            - make

            #Make silo?
            #Did I use autotools or just tar?
            
            #Build MACSio with Silo and HDF5 plugins
            - mkdir build
            - cd build
            - cmake -DCMAKE_INSTALL_PREFIX=./ -DWITH_JSON-CWX_PREFIX= ../json-cwx -DWITH_SILO_PREFIX= ../silo-4.10.2 -DENABLE_HDF5_PLUGIN=ON -DWITH_HDF5_PREFIX= ../CMake-hdf5-1.12.0 ..
            - make
            - make install

#Test for running MACSio with out plugins
macsio:
    inherits_from: _build
    summary: MACSio test with out plug-ins
    run:
        cmds:
    result_parse:
        regex:
            #resultOrSomeName:
                regex:
                action:

#Test for running MACSio using Silo plugin
macsioWsilo:
    inherits_from: _build
    summary: MACSio test with plug-in Silo enabled
    run:
        cmds:
    result_parse:
        regex:
            #variableOrSomeName:
                regex:
                action:

#Test for running MACSio using Silo plugin with HDF5 enabled
macsioWsiloHDF5:
    inherits_from: _build
    summary: MACSio test with plug-in Silo and HDF5 enabled
    run:
        cmds:
            - echo "Running 93 tasks to 8 HDF5 files in Multiple Independent File Mode."
            - srun -np 93 ./macsio --interface hdf5 --parallel_file_mode MIF 8

            - echo "Running 93 tasks to 1 HDF5 file in Single Shared File Mode."
            - srun - np 93 ./macsio --interface hdf5 --parallel_file_mode SIF 1

            #- echo "Running {{numOfTasksVariable}} tasks to {{numOfHDF5fileVariable}} HDF5 files in {{modeVariable}}."
            #- srun -np {{numOfTasksVariable}} ./macsio --interface hdf5 --parallel_file_mode {{modeVariable}} {{numOfHDF5fileVariable}}
            #
            #- echo "Running {{numOfTasks}} tasks to {{numOfHDF5}} HDF5 files in {{mode}},on a {{partDim}} dimensional, {{partType}} mesh with {{ppTask}} average parts per task and a nominal I/O request of{{ppSize}} bytes"
            #- srun -np {{numOfTasks}} ./macsio --interface hdf5 --parallel_file_mode {{mode}} {{numofHDF5}} --avg_num_parts {{ppTask}} --part_size {{ppSize}} --part_dim {{partDim}} --part_type {{partType}}
            #  
            #
    result_parse:
        regex:
            #KeywordOrSomeName:
                regex:
                action: 
