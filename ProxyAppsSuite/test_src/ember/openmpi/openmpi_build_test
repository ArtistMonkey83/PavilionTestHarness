#!/bin/bash

# scipt name
sn=`basename $0`

comp_classes="gcc,intel,pgi,pathscale"
comp_vers=""
comp_mods=""
ompi_version=0
mod_base="openmpi"
justsummary="False"
on_headnode="False"
hostfile=""
debug_str=">> /dev/null 2>&1"
parallel_launcher="mpirun"
cray_conflict_modfiles="cray-mpich cray-libsci"

function description {
    echo "$0 Description:"
    echo -e "\tThis script will test Open MPI for the specified compilers and mpi"
    echo -e "\tlibraries. It requires the modules system to function properly."
    echo ""
}

function usage {
    echo "$0 usage:"
    echo "$0 --version=VER [OPTIONS]"
    echo ""
    echo "OPTIONS:"
    echo -e "\t--version=VER"
    echo -e "\t\tSpecify the version of Open MPI to test. Required."
    echo -e "\t--compiler-class=CLASS"
    echo -e "\t\tSpecify which class of compiler to use. CLASS can be a comma-separated"
    echo -e "\t\tlist. Default is $comp_classes."
    echo -e "\t--compiler-version=VER"
    echo -e "\t\tSpecify the version of the compiler to use. VER can be a comma-separated list."
    echo -e "\t\tIf the system gnu compilers are to be used, VER can contain the word 'system'"
    echo -e "\t\tto tell the script to use those compilers. No module files will be used for"
    echo -e "\t\tthat case. If this option is not used, vampirtrace will be tested for every"
    echo -e "\t\tversion of the compilers found."
    echo -e "\t--compiler-modules=MOD1[,MOD2...]"
    echo -e "\t\tSpecify compiler modules to use. This optional option takes a comma-separated"
    echo -e "\t\tlist of compiler modules. It will be against modulefiles given in this list"
    echo -e "\t\tthat this script will build Open MPI. The build attempts will be in the same"
    echo -e "\t\torder specified in the list. Overrides --compiler-class and --compiler-version."
    echo -e "\t--module-base=BASE"
    echo -e "\t\tSpecify the base name of the Open MPI modulefile. This script will look"
    echo -e "\t\tfor a module named BASE/<version> where <version> is taken"
    echo -e "\t\tfrom the --version parameter. Default for BASE is $mod_base."
    echo -e "\t--parallel-launcher=LAUNCHER"
    echo -e "\t\tSpecify what parallel launcher to use. Default is $parallel_launcher."
    echo -e "\t--headnode-mode"
    echo -e "\t\tTell the script that it is running on a headnode machine. Appropriate"
    echo -e "\t\tenvironment variables will be set such that Open MPI can be run on the headnode."
    echo -e "\t--hostfile=FILE"
    echo -e "\t\tTell the script that a job submission/execution environment will not be used."
    echo -e "\t\tInstead, the script will attempt to run the tests on the hosts given in FILE."
    echo -e "\t\tThis script should be run from one of the nodes specified in that host file."
    echo -e "\t--debug"
    echo -e "\t\tNo output will be suppressed."
    echo -e "\t--summary"
    echo -e "\t\tPrint the summary and then exit without doing anything."
}

for arg in $*; do
    case $arg in
        --version=*)
            ompi_version=`echo $arg | sed 's/[-a-zA-Z0-9]*=//'`
            ;;
        --compiler-class=*)
            comp_classes=`echo $arg | sed 's/[-a-zA-Z0-9]*=//'`
            ;;
        --compiler-version=*)
            comp_vers=`echo $arg | sed 's/[-a-zA-Z0-9]*=//'`
            ;;
        --compiler-modules=*)
            comp_mods=`echo $arg | sed 's/[-a-zA-Z0-9]*=//'`
            ;;
        --module-base=*)
            mod_base=`echo $arg | sed 's/[-a-zA-Z0-9]*=//'`
            ;;
        --parallel-launcher=*)
            parallel_launcher=`echo $arg | sed 's/[-a-zA-Z0-9]*=//'`
            ;;
        --headnode-mode)
            on_headnode="True"
            ;;
        --hostfile=*)
            hostfile=`echo $arg | sed 's/[-a-zA-Z0-9]*=//'`
            ;;
        --debug)
            debug_str=""
            ;;
        --summary)
            justsummary="True"
            ;;
        '-h' | '--help')
            description
            usage
            exit 0
            ;;
        *)
            #Unknown option
            echo "$0: unknown command line option $arg"
            usage
            exit 1
            ;;
    esac
done

if [ "$ompi_version" == 0 ]; then
    echo "$sn Error: --version not used."
    usage
    exit 1
fi

# Set hpcsoft_dir
hpcsoft_dir="/usr/projects/hpcsoft"

# Check hpcsoft_dir
if [ ! -d "$hpcsoft_dir" ]; then
    echo "$sn Error: $hpcsoft_dir does not exist."
    exit 1
fi

# Check for hpcsoft utilities
if [ ! -d "$hpcsoft_dir/utilities/.git" ]; then
    echo "$sn Error: $hpcsoft_dir/utilities does not contain a proper hpcsoft utilities repository"
    exit 1
fi

hpcsoft_util="$hpcsoft_dir/utilities"

# Get the os so that we know how to deal with the environment modulefile environment
os=$(${hpcsoft_util}/bin/sys_os)

# Grab some useful functions.
if [ -e ${hpcsoft_util}/lib/envmodules_helpers.bash ]; then
    source ${hpcsoft_util}/lib/envmodules_helpers.bash
else
    echo "${hpcsoft_util}/lib/envmodules_helpers.bash does not exist. Exiting."
    exit 1
fi

# Call check_modules from envmodules_query.bash
check_modules
if [ $? != 0 ]; then
    exit 1
fi

# Check for the Open MPI module. It is a universal module, so
# it won't do any good to try to load it now. It will be loaded later.
ompi_module="${mod_base}/${ompi_version}"
module_exists $ompi_module
if [[ $? != 0 ]]; then
    echo "$sn Error: ${ompi_module} module not available"
    exit 1
fi

# figure out the list of modules associated with the compiler classes
if [ "$comp_mods" != "" ]; then
    # separate the comma-separated list in comp_mods into a space-separated
    # list
    comps=`echo $comp_mods | sed 's/,/ /g'`
    # now check that each exists
    for comp in $comps; do
        if [ "$comp" != "gcc/system" ]; then
            module_exists $comp
            if [[ $? != 0 ]]; then
                echo "Error: $comp does not exist"
                exit 1
            fi
        fi
    done
else
    # use functions defined in envmodules_module_queryfuncs.bash
    # to gather modules from the environment
    comps=`find_compilers "$comp_classes" "$comp_vers"`
fi
# Now, comps should be a space-separated list that is a list of compiler
# modules. All of the modules should have been verified to exist.

# First, print a summary
echo ""
echo "Summary"
echo "Open MPI version: $ompi_version"
echo "Open MPI module file: $ompi_module"
echo "Parallel Launcher: $parallel_launcher"
if [ "$on_headnode" == "True" ]; then
    echo "Running in headnode mode."
elif [ -n "$hostfile" ]; then
    echo "Running with a host file: $hostfile"
else
    echo "Running in normal mode"
fi
echo ""
echo "The following compiler modules will be used:"
echo $comps
echo ""

if [ "$justsummary" == "True" ]; then
    exit 0
fi

if [ "$on_headnode" == "True" ]; then
    # export some env variables so that we can use mpirun on a headnode
    echo "Setting env variables needed for headnode mode..."
    export OMPI_MCA_pml=ob1
    export OMPI_MCA_orte_allocation_required=0
    export OMPI_MCA_oob_tcp_if_include=eth0
    export OMPI_MCA_btl=self,sm
    export OMPI_MCA_opal_paffinity_alone=0
fi

if [ -n "$hostfile" ]; then
    # check the hostfile
    echo "Checking $hostfile..."
    if [ ! -f "$hostfile" ]; then
        echo "$hostfile is not a valid file."
        exit 1
    fi
    echo "$hostfile ok"
    echo "Setting env variables..."
    # export some env variables so that we can run MPI on the hosts specified
    # in the host file
    export OMPI_MCA_orte_default_hostfile=$hostfile
    export OMPI_MCA_orte_allocation_required=0
    # The following doesn't seem to have an effect right now...
    export OMPI_MCA_orte_assume_same_shell=0
fi

for comp in $comps; do
    echo "Checking $comp..."
    module_compiler_load $comp
    # Remove any modulefiles that conflict with Open MPI on the Crays. Loading
    # the PrgEnv-* modulefile may load some of them.
    for mod in $cray_conflict_modfiles; do
        module rm $mod
    done
    sstat="PASS"
    module load $ompi_module >> /dev/null 2>&1
    if [ -n "$MPI_ROOT" ]; then
        echo -e "\tMPI_ROOT: $MPI_ROOT"
        # Add any necessary mpirun options.
        if [ -n "$hostfile" ]; then
            mpirun_opts="--prefix $MPI_ROOT -x LD_LIBRARY_PATH -x PATH"
        else
            mpirun_opts=""
        fi
        # run hostname on two hosts
        sstat="PASS"
        echo -ne "\tRun hostname on two processes..."
        eval $parallel_launcher $mpirun_opts -n 2 hostname $debug_str
        if [ $? != 0 ]; then
            sstat="FAIL"
        fi
        echo $sstat
        
        # Enter the tests directory
        eval pushd tests $debug_str

        # compile a simple parallel C hello world program
        sstat="PASS"
        echo -ne "\tCompile and run C hello_world on two processes..."
        rm -f hello_world
        eval mpicc -o hello_world_c hello_world.c $debug_str
        if [ $? != 0 ]; then
            sstat="Compile FAIL"
        else
            eval $parallel_launcher $mpirun_opts -n 2 ./hello_world_c $debug_str
            if [ $? != 0 ]; then
                sstat="Run FAIL"
            fi
        fi
        echo $sstat
        rm -f hello_world_c

        # compile a simple parallel Fortran90 hello world program
        sstat="PASS"
        echo -ne "\tCompile and run Fortran90 hello_world on two processes..."
        eval mpif90 -o hello_world_f hello_world.f90 $debug_str
        if [ $? != 0 ]; then
            sstat="Compile FAIL"
        else
            eval $parallel_launcher $mpirun_opts -n 2 ./hello_world_f $debug_str
            if [ $? != 0 ]; then
                sstat="Run FAIL"
            fi
        fi
        echo $sstat
        rm -f hello_world_f
        
        popd >> /dev/null 2>&1

    else
        # no error, but Open MPI isn't built for this combo yet.
        echo "Open MPI ${ompi_version} is not yet built for $comp"
    fi
    # remove the Open MPI module. If it wasn't loaded before, there is no harm
    # in removing it.
    module rm $ompi_module >> /dev/null 2>&1
    module_compiler_remove $comp
done
